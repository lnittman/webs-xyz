diff --git a/apps/ai/.mastra/output/index.mjs b/apps/ai/.mastra/output/index.mjs
index 27d3803..6e1748e 100644
--- a/apps/ai/.mastra/output/index.mjs
+++ b/apps/ai/.mastra/output/index.mjs
@@ -4,12 +4,15 @@ import { TABLE_EVALS } from '@mastra/core/storage';
 import { checkEvalStorageFields } from '@mastra/core/utils';
 import { Mastra, Telemetry } from '@mastra/core';
 import { createLogger } from '@mastra/core/logger';
-import { PostgresStore } from '@mastra/pg';
 import { Agent } from '@mastra/core/agent';
 import { Memory } from '@mastra/memory';
 import { createOpenRouter } from '@openrouter/ai-sdk-provider';
+import { PostgresStore } from '@mastra/pg';
 import { existsSync, readFileSync, createReadStream, lstatSync } from 'fs';
 import path from 'path';
+import { scrapeWithJina } from './tools/bcbbbaa3-9e08-417a-9e3d-f57c859c6e33.mjs';
+import { Workflow, Step } from '@mastra/core/workflows';
+import { z, ZodFirstPartyTypeKind, ZodOptional } from 'zod';
 import crypto, { randomUUID } from 'crypto';
 import { readFile } from 'fs/promises';
 import { join } from 'path/posix';
@@ -20,12 +23,16 @@ import { RuntimeContext } from '@mastra/core/runtime-context';
 import { Readable as Readable$1, Writable } from 'node:stream';
 import util from 'node:util';
 import { Buffer as Buffer$1 } from 'node:buffer';
-import { z, ZodFirstPartyTypeKind, ZodOptional } from 'zod';
 import { A2AError } from '@mastra/core/a2a';
 import { RuntimeContext as RuntimeContext$1 } from '@mastra/core/di';
 import { isVercelTool } from '@mastra/core/tools';
 import { ReadableStream as ReadableStream$1 } from 'node:stream/web';
 
+const connectionString = process.env.DATABASE_URL || "postgresql://postgres:postgres@localhost:5432/webs_memory";
+const storage = new PostgresStore({
+  connectionString
+});
+
 function loadPrompt(relativePath, fallback = "", variables = {}) {
   try {
     let xmlPath = path.join(process.cwd(), "src/mastra", relativePath);
@@ -99,37 +106,224 @@ function applyPathVariables(pathString, variables = {}) {
   return result;
 }
 
-const openRouter = createOpenRouter({
+const openRouter$1 = createOpenRouter({
   apiKey: process.env.OPENROUTER_API_KEY
 });
-const prompt = loadPrompt("agents/chat/prompt.xml", "", {
+const prompt$1 = loadPrompt("agents/chat/prompt.xml", "", {
   toolsDir: "tools",
   rootDir: process.cwd()
 });
 const chatAgent = new Agent({
   name: "chat",
+  instructions: prompt$1,
+  model: openRouter$1("anthropic/claude-3.7-sonnet"),
+  memory: new Memory({
+    storage,
+    options: {
+      lastMessages: 10,
+      semanticRecall: false,
+      threads: {
+        generateTitle: false
+      }
+    }
+  })
+});
+
+const openRouter = createOpenRouter({
+  apiKey: process.env.OPENROUTER_API_KEY
+});
+const prompt = loadPrompt("agents/webs/prompt.xml", "", {
+  toolsDir: "tools",
+  rootDir: process.cwd()
+});
+const websAgent = new Agent({
+  name: "webs",
   instructions: prompt,
-  model: openRouter("anthropic/claude-3.7-sonnet"),
+  model: openRouter("google/gemini-2.5-flash-preview-05-20"),
+  tools: {
+    "scrape-web-content-jina": scrapeWithJina
+  },
   memory: new Memory({
+    storage,
     options: {
-      semanticRecall: false
+      lastMessages: 5,
+      semanticRecall: false,
+      threads: {
+        generateTitle: false
+      }
     }
   })
 });
 
+const analyzeWebInputSchema = z.object({
+  urls: z.array(z.string().url()).describe("The URLs to analyze"),
+  prompt: z.string().optional().describe("Optional prompt for specific analysis")
+});
+const singleUrlAnalysisSchema = z.object({
+  url: z.string(),
+  title: z.string().optional(),
+  description: z.string().optional(),
+  topics: z.array(z.string()),
+  sentiment: z.enum(["positive", "neutral", "negative"]),
+  summary: z.string(),
+  insights: z.array(z.string()),
+  entities: z.array(z.object({
+    type: z.string(),
+    value: z.string()
+  })),
+  readingTime: z.number(),
+  confidence: z.number(),
+  relatedUrls: z.array(z.string()).optional()
+});
+const analysisResultSchema = z.object({
+  urls: z.array(z.string()),
+  prompt: z.string().nullable(),
+  title: z.string().optional(),
+  description: z.string().optional(),
+  topics: z.array(z.string()),
+  sentiment: z.enum(["positive", "neutral", "negative"]),
+  insights: z.array(z.string()),
+  entities: z.array(z.object({
+    type: z.string(),
+    value: z.string()
+  })),
+  readingTime: z.number(),
+  confidence: z.number(),
+  relatedUrls: z.array(z.string()),
+  urlAnalyses: z.array(singleUrlAnalysisSchema),
+  metadata: z.object({
+    timestamp: z.string(),
+    urlCount: z.number()
+  })
+});
+const analyzeWebStep = new Step({
+  id: "analyze-web",
+  description: "Analyzes multiple web pages using the webs agent",
+  inputSchema: analyzeWebInputSchema,
+  outputSchema: analysisResultSchema,
+  execute: async ({ context }) => {
+    const triggerData = context?.triggerData?.triggerData || context?.triggerData;
+    if (!triggerData) {
+      throw new Error("Trigger data not found");
+    }
+    const parsedData = analyzeWebInputSchema.parse(triggerData);
+    const { urls, prompt } = parsedData;
+    try {
+      console.log(`[analyze-web workflow] Analyzing ${urls.length} URLs`);
+      const urlAnalyses = await Promise.all(
+        urls.map(async (url) => {
+          try {
+            const userMessage = prompt ? `Analyze this website and also identify any related or referenced URLs in the content: ${url}
+
+Specific request: ${prompt}` : `Analyze this website and also identify any related or referenced URLs in the content: ${url}`;
+            console.log(`[analyze-web workflow] Analyzing URL: ${url}`);
+            const response = await websAgent.generate([
+              {
+                role: "user",
+                content: userMessage
+              }
+            ]);
+            console.log(`[analyze-web workflow] Got response for URL: ${url}`);
+            try {
+              let jsonText = response.text;
+              if (jsonText.startsWith("```json")) {
+                jsonText = jsonText.slice(7);
+              } else if (jsonText.startsWith("```")) {
+                jsonText = jsonText.slice(3);
+              }
+              if (jsonText.endsWith("```")) {
+                jsonText = jsonText.slice(0, -3);
+              }
+              jsonText = jsonText.trim();
+              const analysisData = JSON.parse(jsonText);
+              const relatedUrls = analysisData.relatedUrls || [];
+              return {
+                url,
+                ...analysisData,
+                relatedUrls
+              };
+            } catch (parseError) {
+              console.error(`[analyze-web workflow] Failed to parse JSON for ${url}:`, parseError);
+              return null;
+            }
+          } catch (error) {
+            console.error(`[analyze-web workflow] Failed to analyze ${url}:`, error);
+            return null;
+          }
+        })
+      );
+      const successfulAnalyses = urlAnalyses.filter(Boolean);
+      if (successfulAnalyses.length === 0) {
+        throw new Error("All URL analyses failed");
+      }
+      const combinedAnalysis = {
+        urls,
+        prompt: prompt || null,
+        title: successfulAnalyses[0]?.title || `Analysis of ${urls.length} web pages`,
+        description: prompt ? `Analysis of ${urls.length} URLs based on: "${prompt}"` : `Combined analysis of ${urls.length} web pages`,
+        topics: [...new Set(successfulAnalyses.flatMap((a) => a?.topics || []))],
+        sentiment: determineCombinedSentiment(successfulAnalyses),
+        insights: combineInsights(successfulAnalyses),
+        entities: combineEntities(successfulAnalyses),
+        readingTime: successfulAnalyses.reduce((sum, a) => sum + (a?.readingTime || 0), 0),
+        confidence: successfulAnalyses.reduce((sum, a) => sum + (a?.confidence || 0), 0) / successfulAnalyses.length,
+        relatedUrls: [...new Set(successfulAnalyses.flatMap((a) => a?.relatedUrls || []))],
+        urlAnalyses: successfulAnalyses,
+        metadata: {
+          timestamp: (/* @__PURE__ */ new Date()).toISOString(),
+          urlCount: urls.length
+        }
+      };
+      return combinedAnalysis;
+    } catch (error) {
+      console.error("[analyze-web workflow] Error:", error);
+      throw error;
+    }
+  }
+});
+function determineCombinedSentiment(analyses) {
+  const sentiments = analyses.map((a) => a?.sentiment).filter(Boolean);
+  const sentimentCounts = sentiments.reduce((acc, sentiment) => {
+    acc[sentiment] = (acc[sentiment] || 0) + 1;
+    return acc;
+  }, {});
+  const sortedSentiments = Object.entries(sentimentCounts).sort(([, a], [, b]) => b - a);
+  return sortedSentiments[0]?.[0] || "neutral";
+}
+function combineInsights(analyses) {
+  const allInsights = analyses.flatMap((a) => a?.insights || []);
+  return [...new Set(allInsights)].slice(0, 10);
+}
+function combineEntities(analyses) {
+  const allEntities = analyses.flatMap((a) => a?.entities || []);
+  const uniqueEntities = /* @__PURE__ */ new Map();
+  allEntities.forEach((entity) => {
+    const key = `${entity.type}:${entity.value}`;
+    if (!uniqueEntities.has(key)) {
+      uniqueEntities.set(key, entity);
+    }
+  });
+  return Array.from(uniqueEntities.values());
+}
+const analyzeWeb = new Workflow({
+  name: "analyzeWeb",
+  triggerSchema: analyzeWebInputSchema
+}).step(analyzeWebStep).commit();
+
 const logger$1 = createLogger({
   name: "mastra",
-  level: "info"
+  level: "debug"
 });
-const connectionString = process.env.DATABASE_URL || "postgresql://postgres:postgres@localhost:5432/webs_memory";
 const mastra = new Mastra({
   agents: {
-    chat: chatAgent
+    chat: chatAgent,
+    webs: websAgent
+  },
+  workflows: {
+    analyzeWeb
   },
   logger: logger$1,
-  storage: new PostgresStore({
-    connectionString
-  }),
+  storage,
   telemetry: {
     enabled: false
   }
diff --git a/apps/ai/.mastra/output/tools.mjs b/apps/ai/.mastra/output/tools.mjs
index ff7377b..632ead7 100644
--- a/apps/ai/.mastra/output/tools.mjs
+++ b/apps/ai/.mastra/output/tools.mjs
@@ -1 +1 @@
-export const tools = [];
\ No newline at end of file
+export const tools = ["./tools/bcbbbaa3-9e08-417a-9e3d-f57c859c6e33.mjs"];
\ No newline at end of file
diff --git a/apps/ai/src/mastra/agents/chat/index.ts b/apps/ai/src/mastra/agents/chat/index.ts
index 29b1d0f..6e4d15a 100644
--- a/apps/ai/src/mastra/agents/chat/index.ts
+++ b/apps/ai/src/mastra/agents/chat/index.ts
@@ -2,7 +2,7 @@ import { Agent } from "@mastra/core/agent";
 import { Memory } from '@mastra/memory';
 import { createOpenRouter } from "@openrouter/ai-sdk-provider";
 
-//import { memory } from "./memory";
+import { storage } from "../../storage";
 import { loadPrompt } from "../../utils/loadPrompt";
 
 const openRouter = createOpenRouter({
@@ -22,8 +22,13 @@ export const chatAgent = new Agent({
   instructions: prompt,
   model: openRouter("anthropic/claude-3.7-sonnet"),
   memory: new Memory({
+    storage,
     options: {
+      lastMessages: 10,
       semanticRecall: false,
+      threads: {
+        generateTitle: false
+      }
     },
   }),
 });
diff --git a/apps/ai/src/mastra/agents/chat/memory.ts b/apps/ai/src/mastra/agents/chat/memory.ts
deleted file mode 100644
index bc7d69e..0000000
--- a/apps/ai/src/mastra/agents/chat/memory.ts
+++ /dev/null
@@ -1,24 +0,0 @@
-import { Memory } from "@mastra/memory";
-import { PostgresStore } from "@mastra/pg";
-
-const host = process.env.PGHOST;
-const user = process.env.PGUSER;
-const database = process.env.PGDATABASE;
-const password = process.env.PGPASSWORD;
-const port = process.env.PGPORT || "5432";
- 
-// Initialize memory with PostgreSQL storage and vector search
-export const memory = new Memory({
-  storage: new PostgresStore({
-    host: host || "",
-    port: port ? parseInt(port) : 5432,
-    user: user || "",
-    database: database || "",
-    password: password || "",
-    ssl: true,
-  }),
-  options: {
-    lastMessages: 10,
-    semanticRecall: false,
-  },
-});
\ No newline at end of file
diff --git a/apps/ai/src/mastra/agents/chat/prompt.xml b/apps/ai/src/mastra/agents/chat/prompt.xml
index 1fd8df1..00da55c 100644
--- a/apps/ai/src/mastra/agents/chat/prompt.xml
+++ b/apps/ai/src/mastra/agents/chat/prompt.xml
@@ -7,7 +7,7 @@
   </metadata>
 
   <purpose>
-    You are a versatile assistant with the ability to search the web, analyze websites, and interact with external tools. You provide thoughtful, well-researched responses by first planning your approach, then executing the appropriate steps, and finally summarizing the results in a clear, concise manner.
+    You are a versatile assistant with the ability to search the web, analyze websites, and interact with internal tools. You provide thoughtful, well-researched responses by first planning your approach, then executing the appropriate steps, and finally summarizing the results in a clear, concise manner.
   </purpose>
 
   <capabilities>
diff --git a/apps/ai/src/mastra/agents/index.ts b/apps/ai/src/mastra/agents/index.ts
index 34420d8..77482d3 100644
--- a/apps/ai/src/mastra/agents/index.ts
+++ b/apps/ai/src/mastra/agents/index.ts
@@ -1,2 +1,5 @@
 // Export chat agent
 export { chatAgent } from './chat';
+
+// Export web analyzer agent
+export { webAnalyzer } from './webs';
diff --git a/apps/ai/src/mastra/index.ts b/apps/ai/src/mastra/index.ts
index 257fe47..796fd3d 100644
--- a/apps/ai/src/mastra/index.ts
+++ b/apps/ai/src/mastra/index.ts
@@ -1,32 +1,29 @@
 import { Mastra } from '@mastra/core';
 import { createLogger } from '@mastra/core/logger';
-import { VercelDeployer } from '@mastra/deployer-vercel';
 import { PostgresStore } from '@mastra/pg';
 
 import { chatAgent } from './agents/chat';
+import { websAgent } from './agents/webs';
+import { analyzeWeb } from './workflows/analyze-web';
+import { storage } from './storage';
 
 // Create a logger with less verbose level to reduce output
 const logger = createLogger({
   name: 'mastra',
-  level: 'info'
+  level: 'debug'
 });
 
-const connectionString = process.env.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/webs_memory';
-
 // Create the Mastra instance with our components
 export const mastra = new Mastra({
   agents: {
     chat: chatAgent,
+    webs: websAgent,
+  },
+  workflows: {
+    analyzeWeb,
   },
-  deployer: new VercelDeployer({
-    teamSlug: 'luke-labs',
-    projectName: 'webs-ai',
-    token: process.env.VERCEL_TOKEN || '',
-  }),
   logger,
-  storage: new PostgresStore({
-    connectionString,
-  }),
+  storage,
   telemetry: {
     enabled: false,
   },
diff --git a/apps/app/.env.example b/apps/app/.env.example
index 5a6f5e8..61c2f32 100644
--- a/apps/app/.env.example
+++ b/apps/app/.env.example
@@ -17,6 +17,7 @@ VERCEL_PROJECT_PRODUCTION_URL="http://localhost:3000"
 KNOCK_API_KEY=""
 KNOCK_FEED_CHANNEL_ID=""
 KNOCK_SECRET_API_KEY=""
+MASTRA_SERVER_URL="http://localhost:4111"
 
 # Client
 NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=""
diff --git a/apps/app/env.ts b/apps/app/env.ts
index c807383..ae03625 100644
--- a/apps/app/env.ts
+++ b/apps/app/env.ts
@@ -8,6 +8,7 @@ import { keys as core } from '@repo/next-config/keys';
 import { keys as observability } from '@repo/observability/keys';
 import { keys as security } from '@repo/security/keys';
 import { createEnv } from '@t3-oss/env-nextjs';
+import { z } from 'zod';
 
 export const env = createEnv({
   extends: [
@@ -21,7 +22,11 @@ export const env = createEnv({
     observability(),
     security(),
   ],
-  server: {},
+  server: {
+    MASTRA_SERVER_URL: z.string().url().default('http://localhost:4111'),
+  },
   client: {},
-  runtimeEnv: {},
+  runtimeEnv: {
+    MASTRA_SERVER_URL: process.env.MASTRA_SERVER_URL,
+  },
 });
diff --git a/apps/app/package.json b/apps/app/package.json
index 792aa8f..e8e5d16 100644
--- a/apps/app/package.json
+++ b/apps/app/package.json
@@ -12,6 +12,7 @@
   },
   "dependencies": {
     "@clerk/elements": "^0.23.29",
+    "@mastra/client-js": "^0.10.1",
     "@phosphor-icons/react": "^2.1.10",
     "@radix-ui/react-dropdown-menu": "^2.1.7",
     "@repo/analytics": "workspace:*",
diff --git a/apps/app/src/app/(authenticated)/page.tsx b/apps/app/src/app/(authenticated)/page.tsx
index d511954..ea7fe30 100644
--- a/apps/app/src/app/(authenticated)/page.tsx
+++ b/apps/app/src/app/(authenticated)/page.tsx
@@ -5,13 +5,30 @@ import { Dashboard } from '@/components/dashboard';
 import { useWebs } from '@/hooks/code/web/queries';
 import { useCreateWeb } from '@/hooks/code/web/mutations';
 import { useUserSettings } from '@/hooks/user-settings';
+import { useSetAtom } from 'jotai';
+import { inputTextAtom } from '@/atoms/urls';
+import { startLoadingAtom, stopLoadingAtom } from '@/atoms/loading';
+
+const LOADING_ID = 'webs-dashboard';
 
 export default function RootPage() {
-  const { webs } = useWebs();
+  const { webs, isLoading } = useWebs();
   const { createWeb } = useCreateWeb();
   const { settings } = useUserSettings();
   const [isSubmitting, setIsSubmitting] = useState(false);
   const [selectedModelId, setSelectedModelId] = useState('claude-4-sonnet');
+  const setInputText = useSetAtom(inputTextAtom);
+  const startLoading = useSetAtom(startLoadingAtom);
+  const stopLoading = useSetAtom(stopLoadingAtom);
+
+  // Manage loading state with atoms
+  useEffect(() => {
+    if (isLoading) {
+      startLoading(LOADING_ID);
+    } else {
+      stopLoading(LOADING_ID);
+    }
+  }, [isLoading, startLoading, stopLoading]);
 
   // Update selected model when user settings load
   useEffect(() => {
@@ -23,13 +40,27 @@ export default function RootPage() {
   const handleSubmit = async (input: string) => {
     setIsSubmitting(true);
     try {
-      // Parse input to extract URL and optional prompt
-      const urlRegex = /(https?:\/\/[^\s]+)/;
-      const match = input.match(urlRegex);
-      const url = match ? match[1] : input;
+      // Extract all URLs from the input
+      const urlRegex = /https?:\/\/[^\s]+/g;
+      const urls = input.match(urlRegex) || [];
+
+      // Extract prompt by removing all URLs
       const prompt = input.replace(urlRegex, '').trim() || undefined;
 
-      await createWeb({ url, prompt });
+      if (urls.length === 0) {
+        console.warn('No URLs found in input');
+        return;
+      }
+
+      // Create web with multiple URLs
+      await createWeb({
+        urls,
+        prompt,
+        url: urls[0] || '', // Primary URL for backward compatibility
+      });
+
+      // Clear the prompt bar
+      setInputText('');
     } finally {
       setIsSubmitting(false);
     }
diff --git a/apps/app/src/app/(authenticated)/w/[id]/page.tsx b/apps/app/src/app/(authenticated)/w/[id]/page.tsx
index 1529578..9330877 100644
--- a/apps/app/src/app/(authenticated)/w/[id]/page.tsx
+++ b/apps/app/src/app/(authenticated)/w/[id]/page.tsx
@@ -6,7 +6,7 @@ import { Link } from 'next-view-transitions';
 import { useWeb } from '@/hooks/code/web/queries';
 import { ClientLayout } from '@/components/shared/client-layout';
 import { cn } from '@repo/design/lib/utils';
-import { Brain, Tag, Sparkle, Clock, ChartLine, Hash, Quotes, Link as LinkIcon } from '@phosphor-icons/react/dist/ssr';
+import { Brain, Tag, Sparkle, Clock, ChartLine, Hash, Quotes, Link as LinkIcon, Globe } from '@phosphor-icons/react/dist/ssr';
 
 interface WebDetailPageProps {
     params: Promise<{
@@ -14,15 +14,6 @@ interface WebDetailPageProps {
     }>;
 }
 
-interface ContentInsights {
-    readingTime: number;
-    sentiment: 'positive' | 'neutral' | 'negative';
-    keyTopics: string[];
-    entities: { type: string; value: string }[];
-    summary: string;
-    confidence: number;
-}
-
 // Helper to extract domain from URL
 function extractDomain(url: string): string {
     try {
@@ -54,20 +45,6 @@ export default function WebDetailPage({ params }: WebDetailPageProps) {
         params.then(({ id }) => setId(id));
     }, [params]);
 
-    // Content insights (in real app, this would come from the backend)
-    const contentInsights: ContentInsights = {
-        readingTime: 5,
-        sentiment: 'neutral',
-        keyTopics: ['Next.js', 'React', 'Web Development', 'TypeScript'],
-        entities: [
-            { type: 'ORGANIZATION', value: 'Vercel' },
-            { type: 'TECHNOLOGY', value: 'Next.js 15' },
-            { type: 'PERSON', value: 'Lee Robinson' }
-        ],
-        summary: 'Technical documentation covering Next.js 15 features including App Router, Server Components, and performance optimizations.',
-        confidence: 0.92
-    };
-
     if (isLoading) {
         return (
             <ClientLayout>
@@ -110,6 +87,17 @@ export default function WebDetailPage({ params }: WebDetailPageProps) {
         );
     }
 
+    // Use actual data from web object or defaults
+    const confidence = web.confidence || 0;
+    const readingTime = web.readingTime || 0;
+    const sentiment = web.sentiment || 'neutral';
+    const topics = web.topics || [];
+    const entities = web.entities || [];
+    const insights = web.insights || [];
+    const urls = web.urls || [web.url];
+    const relatedUrls = web.relatedUrls || [];
+    const hasAnalysisData = web.analysis && Object.keys(web.analysis).length > 0;
+
     return (
         <ClientLayout
             webTitle={web.title || extractDomain(web.url)}
@@ -121,12 +109,22 @@ export default function WebDetailPage({ params }: WebDetailPageProps) {
                     <div className="w-full max-w-3xl px-6 py-3">
                         <div className="flex items-center justify-between">
                             <div className="flex items-center gap-4">
-                                <div className="flex items-center gap-2">
-                                    <Brain size={14} weight="duotone" className="text-green-600" />
-                                    <span className="text-xs text-green-600 font-mono">
-                                        CONFIDENCE: {Math.round(contentInsights.confidence * 100)}%
-                                    </span>
-                                </div>
+                                {hasAnalysisData && confidence > 0 && (
+                                    <div className="flex items-center gap-2">
+                                        <Brain size={14} weight="duotone" className="text-green-600" />
+                                        <span className="text-xs text-green-600 font-mono">
+                                            CONFIDENCE: {Math.round(confidence * 100)}%
+                                        </span>
+                                    </div>
+                                )}
+                                {urls.length > 1 && (
+                                    <div className="flex items-center gap-2">
+                                        <Globe size={14} weight="duotone" className="text-blue-600" />
+                                        <span className="text-xs text-blue-600 font-mono">
+                                            {urls.length} URLS ANALYZED
+                                        </span>
+                                    </div>
+                                )}
                             </div>
                             <div className="flex items-center gap-4">
                                 <span className={cn(
@@ -156,43 +154,75 @@ export default function WebDetailPage({ params }: WebDetailPageProps) {
                             <div className="space-y-6">
                                 <div>
                                     <h1 className="text-2xl font-semibold mb-3">
-                                        {web.title || web.url}
+                                        {web.title || `Analysis of ${urls.length} web page${urls.length > 1 ? 's' : ''}`}
                                     </h1>
-                                    <a
-                                        href={web.url}
-                                        target="_blank"
-                                        rel="noopener noreferrer"
-                                        className="inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors break-all"
-                                    >
-                                        <LinkIcon size={14} weight="duotone" />
-                                        {web.url}
-                                    </a>
+                                    {urls.length === 1 ? (
+                                        <a
+                                            href={web.url}
+                                            target="_blank"
+                                            rel="noopener noreferrer"
+                                            className="inline-flex items-center gap-2 text-sm text-muted-foreground hover:text-foreground transition-colors break-all"
+                                        >
+                                            <LinkIcon size={14} weight="duotone" />
+                                            {web.url}
+                                        </a>
+                                    ) : (
+                                        <div className="space-y-1">
+                                            {urls.slice(0, 3).map((url, index) => (
+                                                <a
+                                                    key={index}
+                                                    href={url}
+                                                    target="_blank"
+                                                    rel="noopener noreferrer"
+                                                    className="block text-sm text-muted-foreground hover:text-foreground transition-colors truncate"
+                                                >
+                                                    <LinkIcon size={14} weight="duotone" className="inline mr-2" />
+                                                    {url}
+                                                </a>
+                                            ))}
+                                            {urls.length > 3 && (
+                                                <span className="text-xs text-muted-foreground">
+                                                    ... and {urls.length - 3} more
+                                                </span>
+                                            )}
+                                        </div>
+                                    )}
                                 </div>
 
                                 {/* Content Insights Bar */}
-                                <div className="flex items-center gap-6 p-4 border border-border bg-card rounded-lg text-xs font-mono">
-                                    <div className="flex items-center gap-2">
-                                        <Clock size={12} weight="duotone" />
-                                        <span>{contentInsights.readingTime} MIN READ</span>
-                                    </div>
-                                    <span className="text-muted-foreground">|</span>
-                                    <div className="flex items-center gap-2">
-                                        <ChartLine size={12} weight="duotone" />
-                                        <span className={cn(
-                                            "uppercase",
-                                            contentInsights.sentiment === 'positive' && "text-green-600",
-                                            contentInsights.sentiment === 'neutral' && "text-yellow-600",
-                                            contentInsights.sentiment === 'negative' && "text-red-600"
-                                        )}>
-                                            {contentInsights.sentiment} SENTIMENT
-                                        </span>
-                                    </div>
-                                    <span className="text-muted-foreground">|</span>
-                                    <div className="flex items-center gap-2">
-                                        <Hash size={12} weight="duotone" />
-                                        <span>{contentInsights.keyTopics.length} KEY TOPICS</span>
+                                {hasAnalysisData && (
+                                    <div className="flex items-center gap-6 p-4 border border-border bg-card rounded-lg text-xs font-mono">
+                                        {readingTime > 0 && (
+                                            <>
+                                                <div className="flex items-center gap-2">
+                                                    <Clock size={12} weight="duotone" />
+                                                    <span>{Math.round(readingTime)} MIN READ</span>
+                                                </div>
+                                                <span className="text-muted-foreground">|</span>
+                                            </>
+                                        )}
+                                        {sentiment && (
+                                            <>
+                                                <div className="flex items-center gap-2">
+                                                    <ChartLine size={12} weight="duotone" />
+                                                    <span className={cn(
+                                                        "uppercase",
+                                                        sentiment === 'positive' && "text-green-600",
+                                                        sentiment === 'neutral' && "text-yellow-600",
+                                                        sentiment === 'negative' && "text-red-600"
+                                                    )}>
+                                                        {sentiment} SENTIMENT
+                                                    </span>
+                                                </div>
+                                                <span className="text-muted-foreground">|</span>
+                                            </>
+                                        )}
+                                        <div className="flex items-center gap-2">
+                                            <Hash size={12} weight="duotone" />
+                                            <span>{topics.length} KEY TOPICS</span>
+                                        </div>
                                     </div>
-                                </div>
+                                )}
 
                                 {web.prompt && (
                                     <div className="border border-border bg-card p-4 rounded-lg">
@@ -290,6 +320,10 @@ export default function WebDetailPage({ params }: WebDetailPageProps) {
                                                             <span className="text-muted-foreground">Status:</span>
                                                             <span className="font-mono">{web.status}</span>
                                                         </div>
+                                                        <div className="flex justify-between py-2 border-b border-border">
+                                                            <span className="text-muted-foreground">URLs:</span>
+                                                            <span className="font-mono">{urls.length}</span>
+                                                        </div>
                                                         <div className="flex justify-between py-2 border-b border-border">
                                                             <span className="text-muted-foreground">Created:</span>
                                                             <span className="font-mono text-xs">{formatDate(web.createdAt)}</span>
@@ -303,20 +337,24 @@ export default function WebDetailPage({ params }: WebDetailPageProps) {
 
                                                 <div className="space-y-4">
                                                     <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-3">
-                                                        PROCESSING
+                                                        ANALYSIS
                                                     </h3>
                                                     <div className="space-y-3 text-sm">
                                                         <div className="flex justify-between py-2 border-b border-border">
-                                                            <span className="text-muted-foreground">Messages:</span>
-                                                            <span className="font-mono">{web.messages?.length || 0}</span>
+                                                            <span className="text-muted-foreground">Topics:</span>
+                                                            <span className="font-mono">{topics.length}</span>
                                                         </div>
                                                         <div className="flex justify-between py-2 border-b border-border">
-                                                            <span className="text-muted-foreground">Has Prompt:</span>
-                                                            <span className="font-mono">{web.prompt ? 'Yes' : 'No'}</span>
+                                                            <span className="text-muted-foreground">Entities:</span>
+                                                            <span className="font-mono">{entities.length}</span>
+                                                        </div>
+                                                        <div className="flex justify-between py-2 border-b border-border">
+                                                            <span className="text-muted-foreground">Insights:</span>
+                                                            <span className="font-mono">{insights.length}</span>
                                                         </div>
                                                         <div className="flex justify-between py-2">
-                                                            <span className="text-muted-foreground">Has Summary:</span>
-                                                            <span className="font-mono">{web.description ? 'Yes' : 'No'}</span>
+                                                            <span className="text-muted-foreground">Related URLs:</span>
+                                                            <span className="font-mono">{relatedUrls.length}</span>
                                                         </div>
                                                     </div>
                                                 </div>
@@ -326,69 +364,132 @@ export default function WebDetailPage({ params }: WebDetailPageProps) {
 
                                     {activeTab === 'insights' && (
                                         <div className="space-y-8">
-                                            {/* Key Topics */}
-                                            <div>
-                                                <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2">
-                                                    <Tag size={12} weight="duotone" />
-                                                    KEY TOPICS
-                                                </h3>
-                                                <div className="flex flex-wrap gap-2">
-                                                    {contentInsights.keyTopics.map((topic, index) => (
-                                                        <motion.span
-                                                            key={topic}
-                                                            initial={{ opacity: 0, scale: 0.8 }}
-                                                            animate={{ opacity: 1, scale: 1 }}
-                                                            transition={{ delay: index * 0.05 }}
-                                                            className="px-3 py-1.5 border border-border bg-accent text-xs font-mono hover:bg-accent/80 transition-all cursor-pointer rounded-md"
-                                                        >
-                                                            {topic}
-                                                        </motion.span>
-                                                    ))}
-                                                </div>
-                                            </div>
-
-                                            {/* Extracted Entities */}
-                                            <div>
-                                                <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2">
-                                                    <LinkIcon size={12} weight="duotone" />
-                                                    EXTRACTED ENTITIES
-                                                </h3>
-                                                <div className="space-y-2">
-                                                    {contentInsights.entities.map((entity, index) => (
-                                                        <motion.div
-                                                            key={index}
-                                                            initial={{ opacity: 0, x: -10 }}
-                                                            animate={{ opacity: 1, x: 0 }}
-                                                            transition={{ delay: index * 0.05 }}
-                                                            className="flex items-center justify-between p-3 border border-border bg-background rounded-md"
-                                                        >
-                                                            <span className="text-xs text-muted-foreground font-mono uppercase">
-                                                                {entity.type}
-                                                            </span>
-                                                            <span className="text-sm font-medium">
-                                                                {entity.value}
-                                                            </span>
-                                                        </motion.div>
-                                                    ))}
-                                                </div>
-                                            </div>
-
-                                            {/* Content Analysis */}
-                                            <div>
-                                                <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2">
-                                                    <Quotes size={12} weight="duotone" />
-                                                    ANALYSIS
-                                                </h3>
-                                                <div className="p-4 border border-border bg-accent/50 rounded-lg">
-                                                    <p className="text-sm leading-relaxed italic">
-                                                        "{contentInsights.summary}"
+                                            {!hasAnalysisData && web.status === 'PROCESSING' ? (
+                                                <div className="text-center py-12">
+                                                    <p className="text-sm text-muted-foreground mb-4">
+                                                        Analysis in progress...
                                                     </p>
-                                                    <div className="mt-3 flex items-center justify-between text-xs text-muted-foreground">
-                                                        <span>Generated automatically</span>
-                                                        <span>Confidence: {Math.round(contentInsights.confidence * 100)}%</span>
+                                                    <div className="w-8 h-1 bg-border rounded-full overflow-hidden mx-auto">
+                                                        <div className="h-full bg-foreground animate-pulse rounded-full" />
                                                     </div>
                                                 </div>
-                                            </div>
+                                            ) : !hasAnalysisData && web.status === 'FAILED' ? (
+                                                <div className="text-center py-12">
+                                                    <p className="text-sm text-red-600">
+                                                        Analysis failed. Please try again.
+                                                    </p>
+                                                </div>
+                                            ) : hasAnalysisData ? (
+                                                <>
+                                                            {/* Key Topics */}
+                                                            {topics.length > 0 && (
+                                                                <div>
+                                                                    <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2">
+                                                                        <Tag size={12} weight="duotone" />
+                                                                        KEY TOPICS
+                                                                    </h3>
+                                                                    <div className="flex flex-wrap gap-2">
+                                                                        {topics.map((topic, index) => (
+                                                                            <motion.span
+                                                                                key={topic}
+                                                                                initial={{ opacity: 0, scale: 0.8 }}
+                                                                                animate={{ opacity: 1, scale: 1 }}
+                                                                                transition={{ delay: index * 0.05 }}
+                                                                                className="px-3 py-1.5 border border-border bg-accent text-xs font-mono hover:bg-accent/80 transition-all cursor-pointer rounded-md"
+                                                                            >
+                                                                                {topic}
+                                                                            </motion.span>
+                                                                        ))}
+                                                                    </div>
+                                                                </div>
+                                                            )}
+
+                                                            {/* Insights */}
+                                                            {insights.length > 0 && (
+                                                                <div>
+                                                                    <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2">
+                                                                        <Sparkle size={12} weight="duotone" />
+                                                                        KEY INSIGHTS
+                                                                    </h3>
+                                                                    <div className="space-y-2">
+                                                                        {insights.map((insight, index) => (
+                                                                            <motion.div
+                                                                                key={index}
+                                                                                initial={{ opacity: 0, x: -10 }}
+                                                                                animate={{ opacity: 1, x: 0 }}
+                                                                                transition={{ delay: index * 0.05 }}
+                                                                                className="p-3 border border-border bg-background rounded-md"
+                                                                            >
+                                                                                <p className="text-sm">{insight}</p>
+                                                                            </motion.div>
+                                                                        ))}
+                                                                    </div>
+                                                                </div>
+                                                            )}
+
+                                                            {/* Extracted Entities */}
+                                                            {entities.length > 0 && (
+                                                                <div>
+                                                                    <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2">
+                                                                        <LinkIcon size={12} weight="duotone" />
+                                                                        EXTRACTED ENTITIES
+                                                                    </h3>
+                                                                    <div className="space-y-2">
+                                                                        {entities.map((entity, index) => (
+                                                                            <motion.div
+                                                                                key={entity.id}
+                                                                                initial={{ opacity: 0, x: -10 }}
+                                                                                animate={{ opacity: 1, x: 0 }}
+                                                                                transition={{ delay: index * 0.05 }}
+                                                                                className="flex items-center justify-between p-3 border border-border bg-background rounded-md"
+                                                                            >
+                                                                                <span className="text-xs text-muted-foreground font-mono uppercase">
+                                                                                    {entity.type}
+                                                                                </span>
+                                                                                <span className="text-sm font-medium">
+                                                                                    {entity.value}
+                                                                                </span>
+                                                                            </motion.div>
+                                                                        ))}
+                                                                    </div>
+                                                                </div>
+                                                            )}
+
+                                                            {/* Related URLs */}
+                                                            {relatedUrls.length > 0 && (
+                                                                <div>
+                                                                    <h3 className="text-xs text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2">
+                                                                        <Globe size={12} weight="duotone" />
+                                                                        RELATED URLS
+                                                                    </h3>
+                                                                    <div className="space-y-2">
+                                                                        {relatedUrls.map((url, index) => (
+                                                                            <motion.a
+                                                                                key={index}
+                                                                                href={url}
+                                                                                target="_blank"
+                                                                                rel="noopener noreferrer"
+                                                                                initial={{ opacity: 0, x: -10 }}
+                                                                                animate={{ opacity: 1, x: 0 }}
+                                                                                transition={{ delay: index * 0.05 }}
+                                                                                className="block p-3 border border-border bg-background rounded-md hover:bg-accent transition-colors"
+                                                                            >
+                                                                                <span className="text-sm text-muted-foreground hover:text-foreground truncate">
+                                                                                    {url}
+                                                                                </span>
+                                                                            </motion.a>
+                                                                        ))}
+                                                                    </div>
+                                                                </div>
+                                                            )}
+                                                        </>
+                                                    ) : (
+                                                        <div className="text-center py-12">
+                                                            <p className="text-sm text-muted-foreground">
+                                                                No analysis data available.
+                                                            </p>
+                                                            </div>
+                                            )}
                                         </div>
                                     )}
 
diff --git a/apps/app/src/app/api/webs/route.ts b/apps/app/src/app/api/webs/route.ts
index 84776c2..9079146 100644
--- a/apps/app/src/app/api/webs/route.ts
+++ b/apps/app/src/app/api/webs/route.ts
@@ -1,5 +1,6 @@
 import { NextRequest } from 'next/server';
-import { listWebs, createWeb } from '@/lib/api/services/webs';
+import { listWebs, createWeb, updateWeb } from '@/lib/api/services/webs';
+import { analyzeWebAsync } from '@/lib/api/services/ai';
 import { success, created, error as errorResponse } from '@/lib/api/response';
 
 export async function GET(request: NextRequest) {
@@ -18,6 +19,23 @@ export async function POST(request: NextRequest) {
   try {
     const body = await request.json();
     const web = await createWeb(body);
+    
+    // Start the analysis workflow asynchronously
+    analyzeWebAsync({
+      url: web.url,
+      prompt: web.prompt || undefined,
+    })
+      .then(async (runId) => {
+        console.log(`Started analysis workflow for ${web.url} with runId: ${runId}`);
+        // Update the web status to PROCESSING
+        await updateWeb(web.id, { status: 'PROCESSING' });
+      })
+      .catch((error) => {
+        console.error(`Failed to start analysis for ${web.url}:`, error);
+        // Update the web status to FAILED
+        updateWeb(web.id, { status: 'FAILED' }).catch(console.error);
+      });
+    
     return created(web);
   } catch (error) {
     console.error('Error creating web:', error);
diff --git a/apps/app/src/components/dashboard/webs-grid.tsx b/apps/app/src/components/dashboard/webs-grid.tsx
index c5af7c9..0ec949a 100644
--- a/apps/app/src/components/dashboard/webs-grid.tsx
+++ b/apps/app/src/components/dashboard/webs-grid.tsx
@@ -1,6 +1,7 @@
 import { useAtom } from 'jotai';
 import { motion, AnimatePresence } from 'framer-motion';
 import { viewModeAtom } from '@/atoms/dashboard';
+import { isLoadingAtom } from '@/atoms/loading';
 import { WebCard } from './web-card';
 import { EmptyState } from './empty-state';
 import { SearchEmptyState } from './search-empty-state';
@@ -14,8 +15,15 @@ interface WebsGridProps {
     processingCount?: number;
 }
 
-export function WebsGrid({ webs, searchQuery, onClearSearch, layout, processingCount = 0 }: WebsGridProps) {
+export function WebsGrid({
+    webs,
+    searchQuery,
+    onClearSearch,
+    layout,
+    processingCount = 0
+}: WebsGridProps) {
     const [viewMode] = useAtom(viewModeAtom);
+    const [isLoading] = useAtom(isLoadingAtom);
 
     const fadeTransition = {
         initial: { opacity: 0, y: 10 },
@@ -31,6 +39,11 @@ export function WebsGrid({ webs, searchQuery, onClearSearch, layout, processingC
         transition: { duration: 0.4, ease: 'easeOut' }
     };
 
+    // Show empty content area while loading (progress bar is handled globally)
+    if (isLoading) {
+        return <div className="flex-1" style={{ minHeight: '60vh' }} />;
+    }
+
     // Show search empty state if there's a search query but no results
     if (searchQuery && webs.length === 0) {
         return (
diff --git a/apps/app/src/components/shared/client-layout.tsx b/apps/app/src/components/shared/client-layout.tsx
index 094996b..530cb20 100644
--- a/apps/app/src/components/shared/client-layout.tsx
+++ b/apps/app/src/components/shared/client-layout.tsx
@@ -5,6 +5,7 @@ import { useAtom } from 'jotai';
 import { Navigation } from './navigation';
 import { SearchModal } from './search-modal';
 import { FontLoader } from './font-loader';
+import { ProgressBar } from './progress-bar';
 import { useWebs } from '@/hooks/code/web/queries';
 import { searchModalOpenAtom } from '@/atoms/search';
 
@@ -47,6 +48,9 @@ export function ClientLayout({
                 webs={webs || []}
             />
 
+            {/* Global Progress Bar */}
+            <ProgressBar />
+
             <main className="flex-1 flex flex-col pt-14">
                 {children}
             </main>
diff --git a/apps/app/src/components/shared/navigation.tsx b/apps/app/src/components/shared/navigation.tsx
index dd9814e..bd2ef76 100644
--- a/apps/app/src/components/shared/navigation.tsx
+++ b/apps/app/src/components/shared/navigation.tsx
@@ -13,6 +13,7 @@ import {
     BreadcrumbPage,
     BreadcrumbSeparator,
 } from '@repo/design/components/ui/breadcrumb';
+import React from 'react';
 
 interface NavigationProps {
     webTitle?: string;
@@ -65,13 +66,13 @@ export function Navigation({ webTitle, webId }: NavigationProps) {
                             <Breadcrumb>
                                 <BreadcrumbList>
                                     {breadcrumbItems.map((item, index) => (
-                                        <BreadcrumbItem key={item.href}>
-                                            {index === breadcrumbItems.length - 1 ? (
-                                                <BreadcrumbPage className="text-foreground font-medium">
-                                                    {item.label}
-                                                </BreadcrumbPage>
-                                            ) : (
-                                                <>
+                                        <React.Fragment key={item.href}>
+                                            <BreadcrumbItem>
+                                                {index === breadcrumbItems.length - 1 ? (
+                                                    <BreadcrumbPage className="text-foreground font-medium">
+                                                        {item.label}
+                                                    </BreadcrumbPage>
+                                                ) : (
                                                     <BreadcrumbLink asChild>
                                                         <Link
                                                             href={item.href}
@@ -80,12 +81,14 @@ export function Navigation({ webTitle, webId }: NavigationProps) {
                                                             {item.label}
                                                         </Link>
                                                     </BreadcrumbLink>
-                                                    <BreadcrumbSeparator>
-                                                        <span className="text-muted-foreground">/</span>
-                                                    </BreadcrumbSeparator>
-                                                </>
+                                                )}
+                                            </BreadcrumbItem>
+                                            {index < breadcrumbItems.length - 1 && (
+                                                <BreadcrumbSeparator>
+                                                    <span className="text-muted-foreground">/</span>
+                                                </BreadcrumbSeparator>
                                             )}
-                                        </BreadcrumbItem>
+                                        </React.Fragment>
                                     ))}
                                 </BreadcrumbList>
                             </Breadcrumb>
diff --git a/apps/app/src/hooks/code/web/queries.ts b/apps/app/src/hooks/code/web/queries.ts
index f2d3949..33854fd 100644
--- a/apps/app/src/hooks/code/web/queries.ts
+++ b/apps/app/src/hooks/code/web/queries.ts
@@ -1,4 +1,5 @@
 import useSWR from 'swr';
+import { useEffect, useState } from 'react';
 import type { Web } from '@/types/web';
 
 const fetcher = async (url: string) => {
@@ -14,7 +15,8 @@ const fetcher = async (url: string) => {
 };
 
 export function useWebs(workspaceId = 'default') {
-  const { data, error, mutate } = useSWR<Web[]>(
+  const [hasLoadedOnce, setHasLoadedOnce] = useState(false);
+  const { data, error, mutate, isValidating } = useSWR<Web[]>(
     `/api/webs?workspaceId=${workspaceId}`,
     fetcher,
     {
@@ -23,9 +25,16 @@ export function useWebs(workspaceId = 'default') {
     }
   );
 
+  // Track when we've successfully loaded data for the first time
+  useEffect(() => {
+    if (data && !error && !isValidating) {
+      setHasLoadedOnce(true);
+    }
+  }, [data, error, isValidating]);
+
   return {
     webs: data || [],
-    isLoading: !error && !data,
+    isLoading: !hasLoadedOnce && isValidating,
     isError: error,
     mutate,
   };
@@ -36,7 +45,14 @@ export function useWeb(webId: string) {
     webId ? `/api/webs/${webId}` : null,
     fetcher,
     {
-      refreshInterval: 2000, // Poll more frequently for individual web
+      refreshInterval: (data) => {
+        // Poll more frequently if the web is still processing
+        if (data?.status === 'PROCESSING') {
+          return 1000; // Poll every second
+        }
+        // Otherwise poll less frequently
+        return 5000; // Poll every 5 seconds
+      },
     }
   );
 
diff --git a/apps/app/src/lib/api/schemas/web.ts b/apps/app/src/lib/api/schemas/web.ts
index 9cde901..4d38716 100644
--- a/apps/app/src/lib/api/schemas/web.ts
+++ b/apps/app/src/lib/api/schemas/web.ts
@@ -8,21 +8,40 @@ export const messageSchema = z.object({
   createdAt: z.string(),
 });
 
+export const webEntitySchema = z.object({
+  id: z.string(),
+  webId: z.string(),
+  type: z.string(),
+  value: z.string(),
+  createdAt: z.string(),
+});
+
 export const webSchema = z.object({
   id: z.string(),
   url: z.string().url(),
+  urls: z.array(z.string().url()).optional(),
   domain: z.string().nullable().optional(),
   title: z.string().nullable().optional(),
   description: z.string().nullable().optional(),
   prompt: z.string().nullable().optional(),
   status: z.enum(['PENDING', 'PROCESSING', 'COMPLETE', 'FAILED']),
+  // Analysis results
+  analysis: z.any().nullable().optional(),
+  topics: z.array(z.string()).optional(),
+  sentiment: z.string().nullable().optional(),
+  confidence: z.number().nullable().optional(),
+  readingTime: z.number().nullable().optional(),
+  insights: z.array(z.string()).optional(),
+  relatedUrls: z.array(z.string()).optional(),
   createdAt: z.string(),
   updatedAt: z.string(),
   messages: z.array(messageSchema).optional(),
+  entities: z.array(webEntitySchema).optional(),
 });
 
 export const createWebInputSchema = z.object({
   url: z.string().url(),
+  urls: z.array(z.string().url()).optional(),
   prompt: z.string().optional(),
 });
 
diff --git a/apps/app/src/lib/api/services/webs.ts b/apps/app/src/lib/api/services/webs.ts
index 63dcb0d..1b08651 100644
--- a/apps/app/src/lib/api/services/webs.ts
+++ b/apps/app/src/lib/api/services/webs.ts
@@ -1,9 +1,125 @@
 import { database } from '@repo/database';
 import { createWebInputSchema, updateWebInputSchema, Web } from '../schemas/web';
+import { executeWorkflow } from '@/lib/mastra';
+
+// Import Mastra client for workflow execution
+async function triggerWebAnalysis(webId: string, urls: string[], prompt?: string) {
+  try {
+    const result = await executeWorkflow('analyzeWeb', {
+      urls,
+      prompt,
+    }, {
+      webId, // Pass webId as metadata for webhook handling
+    });
+
+    if (!result.runId) {
+      throw new Error('Workflow execution failed: No runId returned');
+    }
+
+    console.log(`Started analysis workflow for web ${webId} with runId: ${result.runId}`);
+    
+    // Since we're using start-async, the workflow is now running in the background
+    // The webhook will be called when it completes, or we can poll for status
+    
+    // For now, let's implement a simple polling mechanism
+    pollForWorkflowCompletion(webId, result.runId);
+    
+  } catch (error) {
+    console.error('Error triggering workflow:', error);
+    // Mark web as failed if workflow trigger fails
+    await database.web.update({
+      where: { id: webId },
+      data: { status: 'FAILED' },
+    });
+  }
+}
+
+// Poll for workflow completion
+async function pollForWorkflowCompletion(webId: string, runId: string) {
+  const maxAttempts = 60; // 2 minutes with 2 second intervals
+  let attempts = 0;
+  
+  const pollInterval = setInterval(async () => {
+    attempts++;
+    
+    try {
+      // Get all runs for this workflow and find our specific run
+      const response = await fetch(`${process.env.NEXT_PUBLIC_AI_URL || 'http://localhost:2100'}/api/workflows/analyzeWeb/runs`, {
+        method: 'GET',
+        headers: {
+          'Content-Type': 'application/json',
+        },
+      });
+      
+      if (!response.ok) {
+        throw new Error(`Failed to get workflow runs: ${response.statusText}`);
+      }
+      
+      const runsData = await response.json();
+      
+      // Find our specific run
+      const ourRun = runsData.runs?.find((run: any) => run.runId === runId);
+      
+      if (!ourRun) {
+        console.error(`Run ${runId} not found in workflow runs`);
+        if (attempts >= maxAttempts) {
+          clearInterval(pollInterval);
+          await database.web.update({
+            where: { id: webId },
+            data: { status: 'FAILED' },
+          });
+        }
+        return;
+      }
+      
+      console.log(`Workflow ${runId} status:`, ourRun.snapshot?.status);
+      
+      // Check if workflow is done (either completed or failed)
+      if (ourRun.snapshot?.status === 'done') {
+        clearInterval(pollInterval);
+        
+        // Check the step status
+        const analyzeWebStep = ourRun.snapshot?.context?.steps?.['analyze-web'];
+        
+        if (analyzeWebStep?.status === 'success' && analyzeWebStep?.output) {
+          console.log('Workflow completed successfully, updating database');
+          await handleWorkflowCompletion(webId, analyzeWebStep.output);
+        } else {
+          console.error('Workflow failed:', analyzeWebStep?.error);
+          await database.web.update({
+            where: { id: webId },
+            data: { status: 'FAILED' },
+          });
+        }
+      } else if (attempts >= maxAttempts) {
+        clearInterval(pollInterval);
+        console.error('Workflow timed out');
+        await database.web.update({
+          where: { id: webId },
+          data: { status: 'FAILED' },
+        });
+      }
+    } catch (error) {
+      console.error('Error polling workflow status:', error);
+      attempts++; // Count errors as attempts
+      
+      if (attempts >= maxAttempts) {
+        clearInterval(pollInterval);
+        await database.web.update({
+          where: { id: webId },
+          data: { status: 'FAILED' },
+        });
+      }
+    }
+  }, 2000); // Poll every 2 seconds
+}
 
 export async function listWebs(workspaceId: string): Promise<Web[]> {
   const webs = await database.web.findMany({
-    include: { messages: true },
+    include: { 
+      messages: true,
+      entities: true,
+    },
     orderBy: { createdAt: 'desc' },
   });
   return webs.map(w => ({
@@ -14,13 +130,20 @@ export async function listWebs(workspaceId: string): Promise<Web[]> {
       ...m,
       createdAt: m.createdAt.toISOString(),
     })),
+    entities: w.entities?.map(e => ({
+      ...e,
+      createdAt: e.createdAt.toISOString(),
+    })) || [],
   }));
 }
 
 export async function getWebById(id: string): Promise<Web | null> {
   const web = await database.web.findUnique({
     where: { id },
-    include: { messages: true },
+    include: { 
+      messages: true,
+      entities: true,
+    },
   });
   if (!web) return null;
   return {
@@ -31,26 +154,44 @@ export async function getWebById(id: string): Promise<Web | null> {
       ...m,
       createdAt: m.createdAt.toISOString(),
     })),
+    entities: web.entities?.map(e => ({
+      ...e,
+      createdAt: e.createdAt.toISOString(),
+    })) || [],
   };
 }
 
 export async function createWeb(input: unknown): Promise<Web> {
   const data = createWebInputSchema.parse(input);
-  const domain = new URL(data.url).hostname.replace('www.', '');
+  
+  // Use urls array if provided, otherwise fall back to single url
+  const urls = data.urls || [data.url];
+  const primaryUrl = urls[0];
+  const domain = new URL(primaryUrl).hostname.replace('www.', '');
+  
   const web = await database.web.create({
     data: {
-      url: data.url,
+      url: primaryUrl,
+      urls,
       domain,
       prompt: data.prompt,
-      status: 'PENDING',
+      status: 'PROCESSING', // Start in processing state
+    },
+    include: { 
+      messages: true,
+      entities: true,
     },
-    include: { messages: true },
   });
+
+  // Trigger the workflow asynchronously
+  triggerWebAnalysis(web.id, urls, data.prompt);
+
   return {
     ...web,
     createdAt: web.createdAt.toISOString(),
     updatedAt: web.updatedAt.toISOString(),
     messages: [],
+    entities: [],
   };
 }
 
@@ -59,6 +200,8 @@ export async function updateWeb(id: string, input: unknown): Promise<Web | null>
 
   // Prepare update data for Prisma
   let updateData: any = { ...data };
+  
+  // Handle messages updates
   if (data.messages) {
     updateData = {
       ...data,
@@ -69,31 +212,31 @@ export async function updateWeb(id: string, input: unknown): Promise<Web | null>
             type: msg.type,
             content: msg.content,
             createdAt: msg.createdAt,
-            // add other fields as needed
           }
         }))
       }
     };
-    // Remove the plain messages array from updateData
     delete updateData.messages;
-    updateData.messages = {
-      update: data.messages.map(msg => ({
-        where: { id: msg.id },
-        data: {
-          type: msg.type,
-          content: msg.content,
-          createdAt: msg.createdAt,
-        }
+  }
+
+  // Handle entities updates
+  if (data.entities) {
+    updateData.entities = {
+      deleteMany: {}, // Clear existing entities
+      create: data.entities.map(entity => ({
+        type: entity.type,
+        value: entity.value,
       }))
     };
-  } else {
-    delete updateData.messages;
   }
 
   const web = await database.web.update({
     where: { id },
     data: updateData,
-    include: { messages: true },
+    include: { 
+      messages: true,
+      entities: true,
+    },
   }) as any;
 
   return {
@@ -106,5 +249,46 @@ export async function updateWeb(id: string, input: unknown): Promise<Web | null>
           createdAt: m.createdAt.toISOString(),
         }))
       : [],
+    entities: Array.isArray(web.entities)
+      ? web.entities.map((e: any) => ({
+          ...e,
+          createdAt: e.createdAt.toISOString(),
+        }))
+      : [],
   };
 }
+
+// New function to handle workflow completion
+export async function handleWorkflowCompletion(webId: string, analysisResult: any) {
+  try {
+    // Update the web with analysis results
+    await database.web.update({
+      where: { id: webId },
+      data: {
+        status: 'COMPLETE',
+        title: analysisResult.title,
+        description: analysisResult.description,
+        analysis: analysisResult,
+        topics: analysisResult.topics,
+        sentiment: analysisResult.sentiment,
+        confidence: analysisResult.confidence,
+        readingTime: analysisResult.readingTime,
+        insights: analysisResult.insights,
+        relatedUrls: analysisResult.relatedUrls,
+        entities: {
+          create: analysisResult.entities.map((entity: any) => ({
+            type: entity.type,
+            value: entity.value,
+          })),
+        },
+      },
+    });
+  } catch (error) {
+    console.error('Error updating web with analysis results:', error);
+    // Mark as failed
+    await database.web.update({
+      where: { id: webId },
+      data: { status: 'FAILED' },
+    });
+  }
+}
diff --git a/apps/app/src/types/web.ts b/apps/app/src/types/web.ts
index 97670d0..435b965 100644
--- a/apps/app/src/types/web.ts
+++ b/apps/app/src/types/web.ts
@@ -1,14 +1,32 @@
+export interface WebEntity {
+  id: string;
+  webId: string;
+  type: string;
+  value: string;
+  createdAt: string;
+}
+
 export interface Web {
   id: string;
   url: string;
+  urls?: string[];
   domain?: string | null;
   title?: string | null;
   description?: string | null;
   prompt?: string | null;
   status: 'PENDING' | 'PROCESSING' | 'COMPLETE' | 'FAILED';
+  // Analysis results
+  analysis?: any;
+  topics?: string[];
+  sentiment?: string | null;
+  confidence?: number | null;
+  readingTime?: number | null;
+  insights?: string[];
+  relatedUrls?: string[];
   createdAt: string;
   updatedAt: string;
   messages?: Message[];
+  entities?: WebEntity[];
 }
 
 export interface Message {
@@ -21,5 +39,6 @@ export interface Message {
 
 export interface CreateWebInput {
   url: string;
+  urls?: string[];
   prompt?: string;
 } 
\ No newline at end of file
diff --git a/packages/database/prisma/schema.prisma b/packages/database/prisma/schema.prisma
index 01c3fa0..3dbd238 100644
--- a/packages/database/prisma/schema.prisma
+++ b/packages/database/prisma/schema.prisma
@@ -13,19 +13,43 @@ datasource db {
 }
 
 model Web {
-  id          String    @id @default(uuid())
-  url         String
-  domain      String? // Extracted domain for grouping
-  title       String? // Page title
-  description String? // Meta description or AI summary
-  prompt      String? // Optional user prompt
-  status      WebStatus @default(PENDING)
-  createdAt   DateTime  @default(now())
-  updatedAt   DateTime  @updatedAt
+  id          String      @id @default(uuid())
+  url         String      @db.Text // Primary URL (deprecated - use urls)
+  urls        String[] // Array of URLs to analyze
+  domain      String? // Primary domain for grouping
+  title       String? // Overall title
+  description String?     @db.Text // Overall summary
+  prompt      String?     @db.Text // User prompt
+  status      WebStatus   @default(PENDING)
+  // Analysis results
+  analysis    Json? // Full analysis JSON
+  topics      String[] // Extracted topics
+  sentiment   String? // Overall sentiment
+  confidence  Float? // Confidence score
+  readingTime Float? // Estimated reading time
+  insights    String[] // Key insights
+  // Additional discovered URLs
+  relatedUrls String[] // URLs found in content
+  createdAt   DateTime    @default(now())
+  updatedAt   DateTime    @updatedAt
   messages    Message[]
+  entities    WebEntity[] // Extracted entities
 
   @@index([domain])
   @@index([createdAt])
+  @@index([status])
+}
+
+model WebEntity {
+  id        String   @id @default(uuid())
+  webId     String
+  web       Web      @relation(fields: [webId], references: [id], onDelete: Cascade)
+  type      String // person, organization, location, etc.
+  value     String // The actual entity value
+  createdAt DateTime @default(now())
+
+  @@index([webId])
+  @@index([type])
 }
 
 model Message {
@@ -33,7 +57,7 @@ model Message {
   webId     String?
   web       Web?        @relation(fields: [webId], references: [id])
   type      MessageType @default(TEXT)
-  content   String
+  content   String      @db.Text
   createdAt DateTime    @default(now())
 
   @@index([webId])
diff --git a/packages/design/components/ui/breadcrumb.tsx b/packages/design/components/ui/breadcrumb.tsx
index b957b20..e37060c 100644
--- a/packages/design/components/ui/breadcrumb.tsx
+++ b/packages/design/components/ui/breadcrumb.tsx
@@ -66,9 +66,9 @@ function BreadcrumbSeparator({
   children,
   className,
   ...props
-}: React.ComponentProps<"li">) {
+}: React.ComponentProps<"span">) {
   return (
-    <li
+    <span
       data-slot="breadcrumb-separator"
       role="presentation"
       aria-hidden="true"
@@ -76,7 +76,7 @@ function BreadcrumbSeparator({
       {...props}
     >
       {children ?? <ChevronRight />}
-    </li>
+    </span>
   )
 }
 
diff --git a/packages/next-config/keys.ts b/packages/next-config/keys.ts
index ee3f951..144e6c9 100644
--- a/packages/next-config/keys.ts
+++ b/packages/next-config/keys.ts
@@ -12,17 +12,15 @@ export const keys = () =>
       NEXT_RUNTIME: z.enum(['nodejs', 'edge']).optional(),
     },
     client: {
+      NEXT_PUBLIC_AI_URL: z.string().min(1).url(),
+      NEXT_PUBLIC_API_URL: z.string().min(1).url(),
       NEXT_PUBLIC_APP_URL: z.string().min(1).url(),
-      NEXT_PUBLIC_WEB_URL: z.string().min(1).url(),
-      NEXT_PUBLIC_API_URL: z.string().min(1).url().optional(),
-      NEXT_PUBLIC_DOCS_URL: z.string().min(1).url().optional(),
     },
     runtimeEnv: {
       ANALYZE: process.env.ANALYZE,
       NEXT_RUNTIME: process.env.NEXT_RUNTIME,
-      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
-      NEXT_PUBLIC_WEB_URL: process.env.NEXT_PUBLIC_WEB_URL,
+      NEXT_PUBLIC_AI_URL: process.env.NEXT_PUBLIC_AI_URL,
       NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL,
-      NEXT_PUBLIC_DOCS_URL: process.env.NEXT_PUBLIC_DOCS_URL,
+      NEXT_PUBLIC_APP_URL: process.env.NEXT_PUBLIC_APP_URL,
     },
   });
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index 751d8a6..38a09b3 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -163,6 +163,9 @@ importers:
       '@clerk/elements':
         specifier: ^0.23.29
         version: 0.23.29(@types/react-dom@19.1.2(@types/react@19.1.1))(@types/react@19.1.1)(next@15.3.0(@opentelemetry/api@1.9.0)(react-dom@19.1.0(react@19.1.0))(react@19.1.0))(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
+      '@mastra/client-js':
+        specifier: ^0.10.1
+        version: 0.10.1(@mastra/core@0.9.4(bufferutil@4.0.9)(openapi-types@12.1.3)(react@19.1.0)(zod@3.24.2))(zod@3.24.2)
       '@phosphor-icons/react':
         specifier: ^2.1.10
         version: 2.1.10(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
@@ -933,6 +936,18 @@ importers:
 
 packages:
 
+  '@ag-ui/client@0.0.27':
+    resolution: {integrity: sha512-W7PX/C40dxeCdf/j9lSL6TI8IEpWct/Fn9JkZdX3zXFf5rPN+RpckRKhYTC0ZstMi909oTww7SHVsVm7exPReg==}
+
+  '@ag-ui/core@0.0.27':
+    resolution: {integrity: sha512-I8i0qsamIVaOhPZ11bz7a+JQ7DIwIhLCon2EYWHikgcLiWzfZNBJhlVBR6Fn29tv3Ost4p6wYWQy84WzAhjJ+Q==}
+
+  '@ag-ui/encoder@0.0.27':
+    resolution: {integrity: sha512-GO42BDdi9pmNsfhPlMQeSxGFfMJJg/Jvgng/N/5elHEfEOjGVtOCkDPpN4lirkuBoXEh/hW6gIgYAXDu/HuZJA==}
+
+  '@ag-ui/proto@0.0.27':
+    resolution: {integrity: sha512-bgF2DGqU+DvcNKF3gOlT97kZmhHNB0lWfjkJQ6ONxMtmWlSVYAE97LCtdTIjXEhnHyqi3QQBQ0BEXJ74q7QMcg==}
+
   '@ai-sdk/provider-utils@2.1.10':
     resolution: {integrity: sha512-4GZ8GHjOFxePFzkl3q42AU0DQOtTQ5w09vmaWUf/pKFXJPizlnzKSUkF0f+VkapIUfDugyMqPMT1ge8XQzVI7Q==}
     engines: {node: '>=18'}
@@ -1429,6 +1444,9 @@ packages:
   '@bufbuild/protobuf@1.10.0':
     resolution: {integrity: sha512-QDdVFLoN93Zjg36NoQPZfsVH9tZew7wKDKyV5qRdj8ntT4wQCOradQjRaTdwMhWUYsgKsvCINKKm87FdEk96Ag==}
 
+  '@bufbuild/protobuf@2.5.1':
+    resolution: {integrity: sha512-lut4UTvKL8tqtend0UDu7R79/n9jA7Jtxf77RNPbxtmWqfWI4qQ9bTjf7KCS4vfqLmpQbuHr1ciqJumAgJODdw==}
+
   '@cfcs/core@0.0.6':
     resolution: {integrity: sha512-FxfJMwoLB8MEMConeXUCqtMGqxdtePQxRBOiGip9ULcYYam3WfCgoY6xdnMaSkYvRvmosp5iuG+TiPofm65+Pw==}
 
@@ -2313,6 +2331,12 @@ packages:
     resolution: {integrity: sha512-qC72D4+CDdjGqJvkFMMEAtancHUQ7/d/tAiHf64z8MopFDmcrtbcJuerDtFceuAfQJ2pDSfCKCtbqoGBNnwg0w==}
     engines: {node: '>=8'}
 
+  '@mastra/client-js@0.10.1':
+    resolution: {integrity: sha512-oMJiQnyjW9VNnG7AT9lKG9/Q1y4HlBvsdE1Tso9U9h2onFLPWpMSY1dLleovJGygt2figYJbobgYaNCoGYqXhg==}
+    peerDependencies:
+      '@mastra/core': ^0.10.0
+      zod: ^3.0.0
+
   '@mastra/core@0.9.4':
     resolution: {integrity: sha512-vkoc2Dgmfo0wwX6DZcc2nUnMmENoW3kSuNYJrDfQzfmS36vR7jBjtv+Y9zdpk9TcHIRCHVHcNub7DG1tnZ40fQ==}
     engines: {node: '>=20'}
@@ -5412,6 +5436,9 @@ packages:
   '@types/unist@3.0.3':
     resolution: {integrity: sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==}
 
+  '@types/uuid@10.0.0':
+    resolution: {integrity: sha512-7gqG38EyHgyP1S+7+xomFtL+ZNHcKv6DwNaCZmJmo1vgMugyF3TCnXVg4t1uk89mLNwnLtnY3TpOpCOyp1/xHQ==}
+
   '@types/uuid@9.0.8':
     resolution: {integrity: sha512-jg+97EGIcY9AGHJJRaaPVgetKDsrTgbRjQ5Msgjh/DQKEFl0DtyRr/VCOyD1T2R1MNeWPK/u7JoGhlDZnKBAfA==}
 
@@ -6715,6 +6742,9 @@ packages:
   fast-json-parse@1.0.3:
     resolution: {integrity: sha512-FRWsaZRWEJ1ESVNbDWmsAlqDk96gPQezzLghafp5J4GUKjbCz3OkAHuZs5TuPEtkbVQERysLp9xv6c24fBm8Aw==}
 
+  fast-json-patch@3.1.1:
+    resolution: {integrity: sha512-vf6IHUX2SBcA+5/+4883dsIjpBTqmfBjmYiWK1savxQmFk4JfBMLa7ynTYOs1Rolp/T1betJxHiGD3g1Mn8lUQ==}
+
   fast-redact@3.5.0:
     resolution: {integrity: sha512-dwsoQlS7h9hMeYUq1W++23NDcBLV4KqONnITDV9DjfS3q1SgDGVrBdvvTLUotWtPSD7asWDV9/CmsZPy8Hf70A==}
     engines: {node: '>=6'}
@@ -7587,10 +7617,12 @@ packages:
 
   libsql@0.4.7:
     resolution: {integrity: sha512-T9eIRCs6b0J1SHKYIvD8+KCJMcWZ900iZyxdnSCdqxN12Z1ijzT+jY5nrk72Jw4B0HGzms2NgpryArlJqvc3Lw==}
+    cpu: [x64, arm64, wasm32]
     os: [darwin, linux, win32]
 
   libsql@0.5.11:
     resolution: {integrity: sha512-P2xY1nL2Jl7oM75LcguAEYqouVcevWhLWT8RU/p9ldaqQx5s/chF9t5ZFXPWP0x9myQQ4SguRqPO+FqdnCzKQg==}
+    cpu: [x64, arm64, wasm32, arm]
     os: [darwin, linux, win32]
 
   lightningcss-darwin-arm64@1.29.2:
@@ -8950,6 +8982,9 @@ packages:
     resolution: {integrity: sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==}
     engines: {npm: '>=2.0.0'}
 
+  rxjs@7.8.1:
+    resolution: {integrity: sha512-AA3TVj+0A2iuIoQkWEK/tqFjBq2j+6PO6Y0zJcvzLAFhEFIO3HL0vls9hWLncZbAAbK0mar7oZ4V079I/qPMxg==}
+
   rxjs@7.8.2:
     resolution: {integrity: sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==}
 
@@ -9693,6 +9728,9 @@ packages:
   unplugin@1.0.1:
     resolution: {integrity: sha512-aqrHaVBWW1JVKBHmGo33T5TxeL0qWzfvjWokObHA9bYmN7eNDkwOxmLjhioHl9878qDFMAaT51XNroRyuz7WxA==}
 
+  untruncate-json@0.0.1:
+    resolution: {integrity: sha512-4W9enDK4X1y1s2S/Rz7ysw6kDuMS3VmRjMFg7GZrNO+98OSe+x5Lh7PKYoVjy3lW/1wmhs6HW0lusnQRHgMarA==}
+
   update-browserslist-db@1.1.3:
     resolution: {integrity: sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==}
     hasBin: true
@@ -10124,6 +10162,33 @@ packages:
 
 snapshots:
 
+  '@ag-ui/client@0.0.27':
+    dependencies:
+      '@ag-ui/core': 0.0.27
+      '@ag-ui/encoder': 0.0.27
+      '@ag-ui/proto': 0.0.27
+      '@types/uuid': 10.0.0
+      fast-json-patch: 3.1.1
+      rxjs: 7.8.1
+      untruncate-json: 0.0.1
+      uuid: 11.1.0
+      zod: 3.25.13
+
+  '@ag-ui/core@0.0.27':
+    dependencies:
+      rxjs: 7.8.1
+      zod: 3.25.13
+
+  '@ag-ui/encoder@0.0.27':
+    dependencies:
+      '@ag-ui/core': 0.0.27
+      '@ag-ui/proto': 0.0.27
+
+  '@ag-ui/proto@0.0.27':
+    dependencies:
+      '@ag-ui/core': 0.0.27
+      '@bufbuild/protobuf': 2.5.1
+
   '@ai-sdk/provider-utils@2.1.10(zod@3.25.13)':
     dependencies:
       '@ai-sdk/provider': 1.0.9
@@ -10133,6 +10198,13 @@ snapshots:
     optionalDependencies:
       zod: 3.25.13
 
+  '@ai-sdk/provider-utils@2.2.8(zod@3.24.2)':
+    dependencies:
+      '@ai-sdk/provider': 1.1.3
+      nanoid: 3.3.11
+      secure-json-parse: 2.7.0
+      zod: 3.24.2
+
   '@ai-sdk/provider-utils@2.2.8(zod@3.25.13)':
     dependencies:
       '@ai-sdk/provider': 1.1.3
@@ -10148,6 +10220,16 @@ snapshots:
     dependencies:
       json-schema: 0.4.0
 
+  '@ai-sdk/react@1.2.12(react@19.1.0)(zod@3.24.2)':
+    dependencies:
+      '@ai-sdk/provider-utils': 2.2.8(zod@3.24.2)
+      '@ai-sdk/ui-utils': 1.2.11(zod@3.24.2)
+      react: 19.1.0
+      swr: 2.3.3(react@19.1.0)
+      throttleit: 2.1.0
+    optionalDependencies:
+      zod: 3.24.2
+
   '@ai-sdk/react@1.2.12(react@19.1.0)(zod@3.25.13)':
     dependencies:
       '@ai-sdk/provider-utils': 2.2.8(zod@3.25.13)
@@ -10158,6 +10240,13 @@ snapshots:
     optionalDependencies:
       zod: 3.25.13
 
+  '@ai-sdk/ui-utils@1.2.11(zod@3.24.2)':
+    dependencies:
+      '@ai-sdk/provider': 1.1.3
+      '@ai-sdk/provider-utils': 2.2.8(zod@3.24.2)
+      zod: 3.24.2
+      zod-to-json-schema: 3.24.5(zod@3.24.2)
+
   '@ai-sdk/ui-utils@1.2.11(zod@3.25.13)':
     dependencies:
       '@ai-sdk/provider': 1.1.3
@@ -11038,6 +11127,8 @@ snapshots:
 
   '@bufbuild/protobuf@1.10.0': {}
 
+  '@bufbuild/protobuf@2.5.1': {}
+
   '@cfcs/core@0.0.6':
     dependencies:
       '@egjs/component': 3.0.5
@@ -11767,6 +11858,69 @@ snapshots:
     dependencies:
       '@lukeed/csprng': 1.1.0
 
+  '@mastra/client-js@0.10.1(@mastra/core@0.9.4(bufferutil@4.0.9)(openapi-types@12.1.3)(react@19.1.0)(zod@3.24.2))(zod@3.24.2)':
+    dependencies:
+      '@ag-ui/client': 0.0.27
+      '@ai-sdk/ui-utils': 1.2.11(zod@3.24.2)
+      '@mastra/core': 0.9.4(bufferutil@4.0.9)(openapi-types@12.1.3)(react@19.1.0)(zod@3.24.2)
+      json-schema: 0.4.0
+      rxjs: 7.8.1
+      zod: 3.24.2
+      zod-to-json-schema: 3.24.5(zod@3.24.2)
+
+  '@mastra/core@0.9.4(bufferutil@4.0.9)(openapi-types@12.1.3)(react@19.1.0)(zod@3.24.2)':
+    dependencies:
+      '@libsql/client': 0.14.0(bufferutil@4.0.9)
+      '@opentelemetry/api': 1.9.0
+      '@opentelemetry/auto-instrumentations-node': 0.56.1(@opentelemetry/api@1.9.0)
+      '@opentelemetry/core': 1.30.1(@opentelemetry/api@1.9.0)
+      '@opentelemetry/exporter-trace-otlp-grpc': 0.57.2(@opentelemetry/api@1.9.0)
+      '@opentelemetry/exporter-trace-otlp-http': 0.57.2(@opentelemetry/api@1.9.0)
+      '@opentelemetry/otlp-exporter-base': 0.57.2(@opentelemetry/api@1.9.0)
+      '@opentelemetry/otlp-transformer': 0.57.2(@opentelemetry/api@1.9.0)
+      '@opentelemetry/resources': 1.30.1(@opentelemetry/api@1.9.0)
+      '@opentelemetry/sdk-metrics': 1.30.1(@opentelemetry/api@1.9.0)
+      '@opentelemetry/sdk-node': 0.57.2(@opentelemetry/api@1.9.0)
+      '@opentelemetry/sdk-trace-base': 1.30.1(@opentelemetry/api@1.9.0)
+      '@opentelemetry/sdk-trace-node': 1.30.1(@opentelemetry/api@1.9.0)
+      '@opentelemetry/semantic-conventions': 1.30.0
+      ai: 4.3.16(react@19.1.0)(zod@3.24.2)
+      cohere-ai: 7.17.1
+      date-fns: 3.6.0
+      dotenv: 16.4.7
+      fastembed: 1.14.4
+      hono: 4.7.10
+      hono-openapi: 0.4.8(hono@4.7.10)(openapi-types@12.1.3)(zod@3.24.2)
+      json-schema: 0.4.0
+      json-schema-to-zod: 2.6.1
+      pino: 9.7.0
+      pino-pretty: 13.0.0
+      radash: 12.1.0
+      sift: 17.1.3
+      xstate: 5.19.3
+      zod: 3.24.2
+      zod-from-json-schema: 0.0.5
+      zod-to-json-schema: 3.24.5(zod@3.24.2)
+    transitivePeerDependencies:
+      - '@hono/arktype-validator'
+      - '@hono/effect-validator'
+      - '@hono/typebox-validator'
+      - '@hono/valibot-validator'
+      - '@hono/zod-validator'
+      - '@sinclair/typebox'
+      - '@valibot/to-json-schema'
+      - arktype
+      - aws-crt
+      - bufferutil
+      - effect
+      - encoding
+      - openapi-types
+      - react
+      - supports-color
+      - utf-8-validate
+      - valibot
+      - zod-openapi
+
   '@mastra/core@0.9.4(bufferutil@4.0.9)(openapi-types@12.1.3)(react@19.1.0)(zod@3.25.13)':
     dependencies:
       '@libsql/client': 0.14.0(bufferutil@4.0.9)
@@ -15477,6 +15631,8 @@ snapshots:
 
   '@types/unist@3.0.3': {}
 
+  '@types/uuid@10.0.0': {}
+
   '@types/uuid@9.0.8': {}
 
   '@types/ws@8.18.1':
@@ -15767,6 +15923,18 @@ snapshots:
       clean-stack: 2.2.0
       indent-string: 4.0.0
 
+  ai@4.3.16(react@19.1.0)(zod@3.24.2):
+    dependencies:
+      '@ai-sdk/provider': 1.1.3
+      '@ai-sdk/provider-utils': 2.2.8(zod@3.24.2)
+      '@ai-sdk/react': 1.2.12(react@19.1.0)(zod@3.24.2)
+      '@ai-sdk/ui-utils': 1.2.11(zod@3.24.2)
+      '@opentelemetry/api': 1.9.0
+      jsondiffpatch: 0.6.0
+      zod: 3.24.2
+    optionalDependencies:
+      react: 19.1.0
+
   ai@4.3.16(react@19.1.0)(zod@3.25.13):
     dependencies:
       '@ai-sdk/provider': 1.1.3
@@ -16915,6 +17083,8 @@ snapshots:
 
   fast-json-parse@1.0.3: {}
 
+  fast-json-patch@3.1.1: {}
+
   fast-redact@3.5.0: {}
 
   fast-safe-stringify@2.1.1: {}
@@ -17316,6 +17486,14 @@ snapshots:
     dependencies:
       react-is: 16.13.1
 
+  hono-openapi@0.4.8(hono@4.7.10)(openapi-types@12.1.3)(zod@3.24.2):
+    dependencies:
+      json-schema-walker: 2.0.0
+      openapi-types: 12.1.3
+    optionalDependencies:
+      hono: 4.7.10
+      zod: 3.24.2
+
   hono-openapi@0.4.8(hono@4.7.10)(openapi-types@12.1.3)(zod@3.25.13):
     dependencies:
       json-schema-walker: 2.0.0
@@ -19309,6 +19487,10 @@ snapshots:
     dependencies:
       tslib: 1.14.1
 
+  rxjs@7.8.1:
+    dependencies:
+      tslib: 2.8.1
+
   rxjs@7.8.2:
     dependencies:
       tslib: 2.8.1
@@ -20180,6 +20362,8 @@ snapshots:
       webpack-sources: 3.2.3
       webpack-virtual-modules: 0.5.0
 
+  untruncate-json@0.0.1: {}
+
   update-browserslist-db@1.1.3(browserslist@4.24.4):
     dependencies:
       browserslist: 4.24.4
@@ -20676,6 +20860,10 @@ snapshots:
     dependencies:
       zod: 3.25.13
 
+  zod-to-json-schema@3.24.5(zod@3.24.2):
+    dependencies:
+      zod: 3.24.2
+
   zod-to-json-schema@3.24.5(zod@3.25.13):
     dependencies:
       zod: 3.25.13
